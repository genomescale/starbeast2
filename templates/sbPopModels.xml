<beast version="2.0" namespace="beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions">
	<!-- population model priors -->
	<mergewith point="sbPopModelTemplates">
		<!-- Analytical integration of per-branch effective population sizes -->
		<subtemplate id="AnalyticalPopulationSizeIntegration" class="starbeast2.DummyModel" mainid="constantPopIOModel.$(n)">
<![CDATA[
			<plugin id="constantPopIOModel.$(n)" spec="starbeast2.DummyModel"/>

			<parameter name="alpha" id="popShape.$(n)" lower="0.0" value="3.0" estimate="false"/>
			<parameter name="mean" id="popMean.$(n)" lower="0.0" value="1.0" estimate="true"/>

			<distribution id="popShapePrior.$(n)" spec="beast.math.distributions.Prior" x="@popShape.$(n)">
				<distr spec="beast.math.distributions.Uniform" lower="0.0" upper="10000.0"/>
			</distribution>

			<distribution id="popMeanPrior.$(n)" spec="beast.math.distributions.Prior" x="@popMean.$(n)">
				<distr spec="beast.math.distributions.OneOnX"/>
			</distribution>

			<operator id="popShapeScale.$(n)" parameter="@popShape.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
			<operator id="popMeanScale.$(n)" parameter="@popMean.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
]]>

			<connect srcID="constantPopIOModel.$(n)" targetID="popModelBridge.$(n)" inputName="childModel" if="inposterior(constantPopIOModel.$(n))"/>

			<connect srcID="popShape.$(n)" targetID="speciescoalescent" inputName="populationShape" if="inposterior(constantPopIOModel.$(n))"/>
			<connect srcID="popMean.$(n)" targetID="speciescoalescent" inputName="populationMean" if="inposterior(constantPopIOModel.$(n))"/>

			<connect srcID="popShape.$(n)" targetID="state" inputName="stateNode" if="inposterior(constantPopIOModel.$(n)) and popShape.Species/estimate=true"/>
			<connect srcID="popMean.$(n)" targetID="state" inputName="stateNode" if="inposterior(constantPopIOModel.$(n)) and popMean.Species/estimate=true"/>

			<connect srcID="popShapePrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(constantPopIOModel.$(n)) and popShape.Species/estimate=true"/>
			<connect srcID="popMeanPrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(constantPopIOModel.$(n)) and popMean.Species/estimate=true"/>

			<connect srcID="popShapeScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(constantPopIOModel.$(n)) and popShape.Species/estimate=true"/>
			<connect srcID="popMeanScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(constantPopIOModel.$(n)) and popMean.Species/estimate=true"/>

			<connect srcID="popMean.$(n)" targetID="updownAll:Species" inputName="down" if="inposterior(constantPopIOModel.$(n)) and popMean.Species/estimate=true"/>

			<connect srcID="popShape.$(n)" targetID="tracelog" inputName="log" if="inposterior(constantPopIOModel.$(n)) and popShape.Species/estimate=true"/>
			<connect srcID="popMean.$(n)" targetID="tracelog" inputName="log" if="inposterior(constantPopIOModel.$(n)) and popMean.Species/estimate=true"/>
		</subtemplate>

		<!-- Joint estimation of per-branch effective population sizes -->
		<subtemplate id="ConstantPopulations" class="starbeast2.ConstantPopulations" mainid="constPopModel.$(n)">
<![CDATA[
			<plugin id="constPopModel.$(n)" spec="starbeast2.ConstantPopulations" speciesTree="@Tree.t:Species">
				<parameter dimension="10" name="populationSizes" id="constPopSizes.$(n)" lower="0.0" value="1.0" upper="2.0" estimate="true"/>
			</plugin>

			<distribution id="constPopSizesPrior.$(n)" spec="beast.math.distributions.Prior" x="@constPopSizes.$(n)">
				<Gamma name="distr" mode="ShapeMean">
					<parameter name="alpha" id="constPopShape.$(n)" lower="0.0" value="2.0" estimate="false"/>
					<parameter name="beta" id="constPopMean.$(n)" lower="0.0" value="1.0" estimate="true"/>
				</Gamma>
			</distribution>

			<distribution id="constPopShapePrior.$(n)" spec="beast.math.distributions.Prior" x="@constPopShape.$(n)">
				<distr spec="beast.math.distributions.Uniform" lower="0.0" upper="10000.0"/>
			</distribution>

			<distribution id="constPopMeanPrior.$(n)" spec="beast.math.distributions.Prior" x="@constPopMean.$(n)">
				<distr spec="beast.math.distributions.OneOnX"/>
			</distribution>

			<operator id="constPopSizesSwap.$(n)" parameter="@constPopSizes.$(n)" spec="starbeast2.RealCycle" k="2" optimise="false" weight="3.0"/>
			<operator id="constPopSizesScale.$(n)" parameter="@constPopSizes.$(n)" scaleFactor="0.5" spec="ScaleOperator" weight="3.0"/>
			<operator id="constPopShapeScale.$(n)" parameter="@constPopShape.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
			<operator id="constPopMeanScale.$(n)" parameter="@constPopMean.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
]]>

			<connect srcID="constPopModel.$(n)" targetID="popModelBridge.$(n)" inputName="childModel" if="inposterior(constPopModel.$(n))"/>
			<connect srcID="constPopModel.$(n)" targetID="SpeciesTreeLoggerX" inputName="populationmodel" if="inposterior(constPopModel.$(n))"/>

			<connect srcID="constPopSizes.$(n)" targetID="state" inputName="stateNode" if="inposterior(constPopModel.$(n)) and constPopSizes.Species/estimate=true"/>
			<connect srcID="constPopShape.$(n)" targetID="state" inputName="stateNode" if="inposterior(constPopModel.$(n)) and constPopShape.Species/estimate=true"/>
			<connect srcID="constPopMean.$(n)" targetID="state" inputName="stateNode" if="inposterior(constPopModel.$(n)) and constPopMean.Species/estimate=true"/>

			<connect srcID="constPopSizesPrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(constPopModel.$(n)) and constPopSizes.Species/estimate=true"/>
			<connect srcID="constPopShapePrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(constPopModel.$(n)) and constPopShape.Species/estimate=true"/>
			<connect srcID="constPopMeanPrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(constPopModel.$(n)) and constPopMean.Species/estimate=true"/>

			<connect srcID="constPopSizesSwap.$(n)" targetID="mcmc" inputName="operator" if="inposterior(constPopModel.$(n)) and constPopSizes.Species/estimate=true"/>
			<connect srcID="constPopSizesScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(constPopModel.$(n)) and constPopSizes.Species/estimate=true"/>
			<connect srcID="constPopShapeScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(constPopModel.$(n)) and constPopShape.Species/estimate=true"/>
			<connect srcID="constPopMeanScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(constPopModel.$(n)) and constPopMean.Species/estimate=true"/>

			<connect srcID="constPopSizes.$(n)" targetID="updownAll:Species" inputName="down" if="inposterior(constPopModel.$(n)) and constPopSizes.Species/estimate=true"/>
			<connect srcID="constPopMean.$(n)" targetID="updownAll:Species" inputName="down" if="inposterior(constPopModel.$(n)) and constPopMean.Species/estimate=true"/>

			<connect srcID="constPopShape.$(n)" targetID="tracelog" inputName="log" if="inposterior(constPopModel.$(n)) and constPopShape.Species/estimate=true"/>
			<connect srcID="constPopMean.$(n)" targetID="tracelog" inputName="log" if="inposterior(constPopModel.$(n)) and constPopMean.Species/estimate=true"/>
		</subtemplate>

		<!-- Joint estimation of per-branch effective population sizes -->
		<subtemplate id="LinearWithConstantRootPopulations" class="starbeast2.LinearWithConstantRoot" mainid="lwcrPopModel.$(n)">
<![CDATA[
			<plugin id="lwcrPopModel.$(n)" spec="starbeast2.LinearWithConstantRoot" speciesTree="@Tree.t:Species">
				<parameter dimension="10" name="tipPopulationSizes" id="tipPopSizes.$(n)" lower="0.0" value="1.0" upper="2.0" estimate="true"/>
				<parameter dimension="10" name="topPopulationSizes" id="topPopSizes.$(n)" lower="0.0" value="1.0" upper="1.0" estimate="true"/>
			</plugin>

			<distribution id="tipPopSizesPrior.$(n)" spec="beast.math.distributions.Prior" x="@tipPopSizes.$(n)">
				<Gamma name="distr">
					<parameter name="alpha" id="tipPopShape.$(n)" lower="0.0" value="4.0" estimate="false"/>
					<parameter name="beta" id="lwcrPopScale.$(n)" lower="0.0" value="1.0" estimate="true"/>
				</Gamma>
			</distribution>

			<distribution id="topPopSizesPrior.$(n)" spec="beast.math.distributions.Prior" x="@topPopSizes.$(n)">
				<Gamma name="distr" beta="@lwcrPopScale.$(n)">
					<parameter name="alpha" id="topPopShape.$(n)" lower="0.0" value="2.0" estimate="false"/>
				</Gamma>
			</distribution>

			<distribution id="tipPopShapePrior.$(n)" spec="beast.math.distributions.Prior" x="@tipPopShape.$(n)">
				<distr spec="beast.math.distributions.Uniform" lower="0.0" upper="10000.0"/>
			</distribution>

			<distribution id="topPopShapePrior.$(n)" spec="beast.math.distributions.Prior" x="@topPopShape.$(n)">
				<distr spec="beast.math.distributions.Uniform" lower="0.0" upper="10000.0"/>
			</distribution>

			<distribution id="lwcrPopScalePrior.$(n)" spec="beast.math.distributions.Prior" x="@lwcrPopScale.$(n)">
				<distr spec="beast.math.distributions.OneOnX"/>
			</distribution>

			<operator id="tipPopSizesSwap.$(n)" parameter="@tipPopSizes.$(n)" spec="starbeast2.RealCycle" k="2" optimise="false" weight="3.0"/>
			<operator id="topPopSizesSwap.$(n)" parameter="@topPopSizes.$(n)" spec="starbeast2.RealCycle" k="2" optimise="false" weight="3.0"/>
			<operator id="tipPopSizesScale.$(n)" parameter="@tipPopSizes.$(n)" scaleFactor="0.5" spec="ScaleOperator" weight="3.0"/>
			<operator id="topPopSizesScale.$(n)" parameter="@topPopSizes.$(n)" scaleFactor="0.5" spec="ScaleOperator" weight="3.0"/>
			<operator id="tipPopShapeScale.$(n)" parameter="@tipPopShape.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
			<operator id="topPopShapeScale.$(n)" parameter="@topPopShape.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
			<operator id="lwcrPopScaleScale.$(n)" parameter="@lwcrPopScale.$(n)" scaleFactor="0.75" spec="ScaleOperator" weight="1.0"/>
]]>

			<connect srcID="lwcrPopModel.$(n)" targetID="popModelBridge.$(n)" inputName="childModel" if="inposterior(lwcrPopModel.$(n))"/>
			<connect srcID="lwcrPopModel.$(n)" targetID="SpeciesTreeLoggerX" inputName="populationmodel" if="inposterior(lwcrPopModel.$(n))"/>

			<connect srcID="tipPopSizes.$(n)" targetID="state" inputName="stateNode" if="inposterior(lwcrPopModel.$(n)) and tipPopSizes.Species/estimate=true"/>
			<connect srcID="topPopSizes.$(n)" targetID="state" inputName="stateNode" if="inposterior(lwcrPopModel.$(n)) and topPopSizes.Species/estimate=true"/>
			<connect srcID="tipPopShape.$(n)" targetID="state" inputName="stateNode" if="inposterior(lwcrPopModel.$(n)) and tipPopShape.Species/estimate=true"/>
			<connect srcID="topPopShape.$(n)" targetID="state" inputName="stateNode" if="inposterior(lwcrPopModel.$(n)) and topPopShape.Species/estimate=true"/>
			<connect srcID="lwcrPopScale.$(n)" targetID="state" inputName="stateNode" if="inposterior(lwcrPopModel.$(n)) and lwcrPopScale.Species/estimate=true"/>

			<connect srcID="tipPopSizesPrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(lwcrPopModel.$(n)) and tipPopSizes.Species/estimate=true"/>
			<connect srcID="topPopSizesPrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(lwcrPopModel.$(n)) and topPopSizes.Species/estimate=true"/>
			<connect srcID="tipPopShapePrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(lwcrPopModel.$(n)) and tipPopShape.Species/estimate=true"/>
			<connect srcID="topPopShapePrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(lwcrPopModel.$(n)) and topPopShape.Species/estimate=true"/>
			<connect srcID="lwcrPopScalePrior.$(n)" targetID="prior" inputName="distribution" if="inposterior(lwcrPopModel.$(n)) and lwcrPopScale.Species/estimate=true"/>

			<connect srcID="tipPopSizesSwap.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and tipPopSizes.Species/estimate=true"/>
			<connect srcID="topPopSizesSwap.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and topPopSizes.Species/estimate=true"/>
			<connect srcID="tipPopSizesScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and tipPopSizes.Species/estimate=true"/>
			<connect srcID="topPopSizesScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and topPopSizes.Species/estimate=true"/>
			<connect srcID="tipPopShapeScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and tipPopShape.Species/estimate=true"/>
			<connect srcID="topPopShapeScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and topPopShape.Species/estimate=true"/>
			<connect srcID="lwcrPopScaleScale.$(n)" targetID="mcmc" inputName="operator" if="inposterior(lwcrPopModel.$(n)) and lwcrPopScale.Species/estimate=true"/>

			<connect srcID="tipPopSizes.$(n)" targetID="updownAll:Species" inputName="down" if="inposterior(lwcrPopModel.$(n)) and tipPopSizes.Species/estimate=true"/>
			<connect srcID="topPopSizes.$(n)" targetID="updownAll:Species" inputName="down" if="inposterior(lwcrPopModel.$(n)) and topPopSizes.Species/estimate=true"/>
			<connect srcID="lwcrPopScale.$(n)" targetID="updownAll:Species" inputName="down" if="inposterior(lwcrPopModel.$(n)) and lwcrPopScale.Species/estimate=true"/>

			<connect srcID="tipPopShape.$(n)" targetID="tracelog" inputName="log" if="inposterior(lwcrPopModel.$(n)) and tipPopShape.Species/estimate=true"/>
			<connect srcID="topPopShape.$(n)" targetID="tracelog" inputName="log" if="inposterior(lwcrPopModel.$(n)) and topPopShape.Species/estimate=true"/>
			<connect srcID="lwcrPopScale.$(n)" targetID="tracelog" inputName="log" if="inposterior(lwcrPopModel.$(n)) and lwcrPopScale.Species/estimate=true"/>
		</subtemplate>
	</mergewith>
</beast>
