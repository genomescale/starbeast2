<beast version="2.0" namespace="beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.tree.coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions">
	<!-- Clock models -->
	<mergewith point="sbClockModelTemplates">
		<!-- Plain ol' strict clock -->
		<subtemplate id="StrictClock" class="beast.evolution.branchratemodel.StrictClockModel" mainid="StrictClock.c:$(n)">
<![CDATA[
			<branchRateModel spec="StrictClockModel" id="StrictClock.c:$(n)">
				<clock.rate id="strictClockRate.c:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
			</branchRateModel>

			<operator id="clockRateScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.5" weight="3.0" parameter="@strictClockRate.c:$(n)"/>

			<prior id="clockRatePrior.c:$(n)" x="@strictClockRate.c:$(n)">
				<distr spec="beast.math.distributions.LogNormalDistributionModel" meanInRealSpace="true">
					<S id="clockRatePriorStdev.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
					<M id="clockRatePriorMean.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				</distr>
			</prior>
]]>

			<connect srcID="strictClockRate.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(StrictClock.c:$(n)) and strictClockRate.c:$(n)/estimate=true"/>

			<connect srcID="clockRatePrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(strictClockRate.c:$(n)) and strictClockRate.c:$(n)/estimate=true">
				Prior on the overall clock rate of partition c:$(n)
			</connect>
			<connect srcID="clockRateScaler.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(strictClockRate.c:$(n)) and strictClockRate.c:$(n)/estimate=true">
				Scale substitution rate of partition c:$(n)
			</connect>

			<connect srcID="strictClockRate.c:$(n)" targetID="tracelog" inputName="log" if="inlikelihood(strictClockRate.c:$(n)) and strictClockRate.c:$(n)/estimate=true"/>

			<connect srcID="strictClockRate.c:$(n)" targetID="updownAll:Species" inputName="up" if="inlikelihood(strictClockRate.c:$(n)) and strictClockRate.c:$(n)/estimate=true"/>
		</subtemplate>

		<!-- UCLN relaxed clock that applies to each gene tree branch -->
		<subtemplate id="Uncorrelated Lognormal" class="starbeast2.UncorrelatedRates" mainid="GeneTreeUCLN.c:$(n)">
<![CDATA[
			<branchRateModel estimateRoot="false" id="GeneTreeUCLN.c:$(n)" spec="starbeast2.UncorrelatedRates" tree="@Tree.t:$(n)">
				<clock.rate id="uclnClockRate.c:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				<rates dimension="10" value="1" estimate="true" id="uclnBranchRates.c:$(n)" spec="parameter.IntegerParameter"/>
				<parameter name="stdev" id="uclnBranchRatesStdev.c:$(n)" lower="0.01" value="0.3" estimate="false" />
			</branchRateModel>

			<operator id="uclnClockRateScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.5" weight="3.0" parameter="@uclnClockRate.c:$(n)"/>
			<operator id="uclnBranchRatesStdevScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.75" weight="3.0" parameter="@uclnBranchRatesStdev.c:$(n)"/>

			<operator id="uclnBranchRatesCycle.c:$(n)" k="2" optimise="false" spec="starbeast2.DiscreteRateCycle" treeRates="@uclnBranchRates.c:$(n)" weight="9.0" />
			<operator id="uclnBranchRatesUniform.c:$(n)" k="1" optimise="false" spec="starbeast2.DiscreteRateUniform" treeRates="@uclnBranchRates.c:$(n)" weight="9.0" />

			<prior id="uclnClockRatePrior.c:$(n)" x="@uclnClockRate.c:$(n)">
				<distr spec="beast.math.distributions.LogNormalDistributionModel" meanInRealSpace="true">
					<S id="uclnClockRatePriorStdev.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
					<M id="uclnClockRatePriorMean.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				</distr>
			</prior>

			<prior id="uclnBranchRatesStdevPrior.c:$(n)" x="@uclnBranchRatesStdev.c:$(n)">
				<distr spec="beast.math.distributions.Exponential">
					<mean id="uclnBranchRatesStdevPriorMean.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				</distr>
			</prior>
]]>
			<connect srcID="uclnClockRate.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeUCLN.c:$(n)) and uclnClockRate.c:$(n)/estimate=true"/>
			<connect srcID="uclnBranchRates.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeUCLN.c:$(n)) and uclnBranchRates.c:$(n)/estimate=true"/>
			<connect srcID="uclnBranchRatesStdev.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeUCLN.c:$(n)) and uclnBranchRatesStdev.c:$(n)/estimate=true"/>

			<connect srcID="uclnClockRatePrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(uclnClockRate.c:$(n)) and uclnClockRate.c:$(n)/estimate=true">
				Prior on the overall clock rate of partition c:$(n)
			</connect>
			<connect srcID="uclnBranchRatesStdevPrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(uclnBranchRates.c:$(n)) and uclnBranchRatesStdev.c:$(n)/estimate=true">
				Prior on the spread of branch rates of partition c:$(n)
			</connect>

			<connect srcID="uclnClockRateScaler.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(uclnClockRate.c:$(n)) and uclnClockRate.c:$(n)/estimate=true">
				Scale substitution rate of partition c:$(n)
			</connect>
			<connect srcID="uclnBranchRatesStdevScaler.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(uclnBranchRates.c:$(n)) and uclnBranchRatesStdev.c:$(n)/estimate=true">
				Scale substitution rate of partition c:$(n)
			</connect>

			<connect srcID="uclnBranchRatesCycle.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(uclnBranchRates.c:$(n)) and uclnBranchRates.c:$(n)/estimate=true">
				Cycle the substitution rates around a subset of branches by one step
			</connect>
			<connect srcID="uclnBranchRatesUniform.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(uclnBranchRates.c:$(n)) and uclnBranchRates.c:$(n)/estimate=true">
				Sample the substitution rate category uniformly
			</connect>

			<connect srcID="uclnClockRate.c:$(n)" targetID="tracelog" inputName="log" if="inlikelihood(uclnClockRate.c:$(n)) and uclnClockRate.c:$(n)/estimate=true"/>
			<connect srcID="uclnBranchRatesStdev.c:$(n)" targetID="tracelog" inputName="log" if="inlikelihood(uclnBranchRates.c:$(n)) and uclnBranchRatesStdev.c:$(n)/estimate=true"/>

			<connect srcID="GeneTreeUCLN.c:$(n)" targetID="TreeWithMetaDataLogger.t:$(n)" inputName="branchratemodel" if="inlikelihood(GeneTreeUCLN.c:$(n))"/>

			<connect srcID="uclnClockRate.c:$(n)" targetID="updownAll:Species" inputName="up" if="inlikelihood(uclnClockRate.c:$(n)) and uclnClockRate.c:$(n)/estimate=true"/>
		</subtemplate>

		<!-- UCED relaxed clock that applies to each gene tree branch -->
		<subtemplate id="Uncorrelated Exponential" class="starbeast2.UncorrelatedRates" mainid="GeneTreeUCED.c:$(n)">
<![CDATA[
			<branchRateModel estimateRoot="false" id="GeneTreeUCED.c:$(n)" spec="starbeast2.UncorrelatedRates" tree="@Tree.t:$(n)">
				<clock.rate id="ucedClockRate.c:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				<rates dimension="10" value="1" estimate="true" id="ucedBranchRates.c:$(n)" spec="parameter.IntegerParameter"/>
			</branchRateModel>

			<operator id="ucedClockRateScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.5" weight="3.0" parameter="@ucedClockRate.c:$(n)"/>

			<operator id="ucedBranchRatesCycle.c:$(n)" k="2" optimise="false" spec="starbeast2.DiscreteRateCycle" treeRates="@ucedBranchRates.c:$(n)" weight="9.0" />
			<operator id="ucedBranchRatesUniform.c:$(n)" k="1" optimise="false" spec="starbeast2.DiscreteRateUniform" treeRates="@ucedBranchRates.c:$(n)" weight="9.0" />

			<prior id="ucedClockRatePrior.c:$(n)" x="@ucedClockRate.c:$(n)">
				<distr spec="beast.math.distributions.LogNormalDistributionModel" meanInRealSpace="true">
					<S id="ucedClockRatePriorStdev.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
					<M id="ucedClockRatePriorMean.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				</distr>
			</prior>
]]>
			<connect srcID="ucedClockRate.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeUCED.c:$(n)) and ucedClockRate.c:$(n)/estimate=true"/>
			<connect srcID="ucedBranchRates.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeUCED.c:$(n)) and ucedBranchRates.c:$(n)/estimate=true"/>

			<connect srcID="ucedClockRatePrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(ucedClockRate.c:$(n)) and ucedClockRate.c:$(n)/estimate=true">
				Prior on the overall clock rate of partition c:$(n)
			</connect>

			<connect srcID="ucedClockRateScaler.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(ucedClockRate.c:$(n)) and ucedClockRate.c:$(n)/estimate=true">
				Scale substitution rate of partition c:$(n)
			</connect>

			<connect srcID="ucedBranchRatesCycle.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(ucedBranchRates.c:$(n)) and ucedBranchRates.c:$(n)/estimate=true">
				Cycle the substitution rates around a subset of branches by one step
			</connect>
			<connect srcID="ucedBranchRatesUniform.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(ucedBranchRates.c:$(n)) and ucedBranchRates.c:$(n)/estimate=true">
				Sample the substitution rate category uniformly
			</connect>

			<connect srcID="ucedClockRate.c:$(n)" targetID="tracelog" inputName="log" if="inlikelihood(ucedClockRate.c:$(n)) and ucedClockRate.c:$(n)/estimate=true"/>

			<connect srcID="GeneTreeUCED.c:$(n)" targetID="TreeWithMetaDataLogger.t:$(n)" inputName="branchratemodel" if="inlikelihood(GeneTreeUCED.c:$(n))"/>

			<connect srcID="ucedClockRate.c:$(n)" targetID="updownAll:Species" inputName="up" if="inlikelihood(ucedClockRate.c:$(n)) and ucedClockRate.c:$(n)/estimate=true"/>
		</subtemplate>

		<!-- RLC relaxed clock that applies to each gene tree branch -->
		<subtemplate id="Random Local Clock" class="starbeast2.RandomLocalRates" mainid="GeneTreeRLC.c:$(n)">
<![CDATA[
			<branchRateModel id="GeneTreeRLC.c:$(n)" spec="starbeast2.RandomLocalRates" tree="@Tree.t:$(n)">
				<clock.rate id="rlcClockRate.c:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				<rates dimension="10" value="1.0" estimate="true" id="rlcBranchRates.c:$(n)" spec="parameter.RealParameter"/>
				<indicators dimension="10" value="false" estimate="true" id="indicators.c:$(n)" spec="parameter.BooleanParameter"/>
			</branchRateModel>

			<operator id="rlcClockRateScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.5" weight="3.0" parameter="@rlcClockRate.c:$(n)"/>

			<operator id="rlcBranchRateScaler.c:$(n)" spec="ScaleOperator" scaleFactor="0.75" parameter="@rlcBranchRates.c:$(n)" weight="18.0"/>
			<operator id="indicatorFlipper.c:$(n)" spec="BitFlipOperator" parameter="@indicators.c:$(n)" weight="9.0"/>

			<prior id="rlcClockRatePrior.c:$(n)" x="@rlcClockRate.c:$(n)">
				<distr spec="beast.math.distributions.LogNormalDistributionModel" meanInRealSpace="true">
					<S id="rlcClockRatePriorStdev.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
					<M id="rlcClockRatePriorMean.s:$(n)" spec="parameter.RealParameter" lower="0.0" value="1.0" estimate="false"/>
				</distr>
			</prior>

			<prior id="branchRatePrior.c:$(n)" name="distribution" x="@rlcBranchRates.c:$(n)">
				<distr spec="beast.math.distributions.Gamma">
					<parameter estimate="false" id="branchRatePriorAlpha.$(n)" name="alpha" lower="0.0" value="0.5"/>
					<parameter estimate="false" id="branchRatePriorBeta.$(n)" name="beta" lower="0.0" value="2.0"/>
				</distr>
			</prior>

			<prior id="indicatorSumPrior.c:$(n)" name="distribution">
				<x id="indicatorSum.c:$(n)" spec="beast.core.util.Sum" arg="@indicators.c:$(n)"/>
				<distr spec="beast.math.distributions.Poisson">
					<lambda spec="parameter.RealParameter" estimate="false" value="0.6931471805599453"/>
				</distr>
			</prior>
]]>
			<connect srcID="rlcClockRate.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeRLC.c:$(n)) and rlcClockRate.c:$(n)/estimate=true"/>
			<connect srcID="rlcBranchRates.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeRLC.c:$(n)) and rlcBranchRates.c:$(n)/estimate=true"/>
			<connect srcID="indicators.c:$(n)" targetID="state" inputName="stateNode" if="inposterior(GeneTreeRLC.c:$(n)) and indicators.c:$(n)/estimate=true"/>

			<connect srcID="rlcClockRatePrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(rlcClockRate.c:$(n)) and rlcClockRate.c:$(n)/estimate=true">
				Prior on the overall clock rate of partition c:$(n)
			</connect>

			<connect srcID="branchRatePrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(rlcBranchRates.c:$(n)) and rlcBranchRates.c:$(n)/estimate=true"/>
			<connect srcID="indicatorSumPrior.c:$(n)" targetID="prior" inputName="distribution" if="inlikelihood(indicators.c:$(n)) and indicators.c:$(n)/estimate=true"/>

			<connect srcID="rlcClockRateScaler.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(rlcClockRate.c:$(n)) and rlcClockRate.c:$(n)/estimate=true">
				Scale substitution rate of partition c:$(n)
			</connect>

			<connect srcID="rlcBranchRateScaler.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(rlcBranchRates.c:$(n)) and rlcBranchRates.c:$(n)/estimate=true">
				Scale individual branch rates
			</connect>
			<connect srcID="indicatorFlipper.c:$(n)" targetID="mcmc" inputName="operator" if="inlikelihood(indicators.c:$(n)) and indicators.c:$(n)/estimate=true">
				Turn branch rate indicators on or off for more or less branch rate changes
			</connect>

			<connect srcID="rlcClockRate.c:$(n)" targetID="tracelog" inputName="log" if="inlikelihood(rlcClockRate.c:$(n)) and rlcClockRate.c:$(n)/estimate=true"/>

			<connect srcID="GeneTreeRLC.c:$(n)" targetID="TreeWithMetaDataLogger.t:$(n)" inputName="branchratemodel" if="inlikelihood(GeneTreeRLC.c:$(n))"/>

			<connect srcID="rlcClockRate.c:$(n)" targetID="updownAll:Species" inputName="up" if="inlikelihood(rlcClockRate.c:$(n)) and rlcClockRate.c:$(n)/estimate=true"/>
		</subtemplate>
	</mergewith>
</beast>
